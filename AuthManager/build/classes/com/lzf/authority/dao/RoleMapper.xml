<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lzf.authority.dao.RoleMapper" >
  <resultMap id="RoleResultMap" type="com.lzf.authority.vo.Role" >
    <id column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_desc" property="roleDesc" jdbcType="VARCHAR" />
    <result column="role_code" property="roleCode" jdbcType="VARCHAR" />
    <result column="role_state" property="roleState" jdbcType="CHAR" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="udate_by" property="udateBy" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
   <!-- AuthInfo的resultMap -->
  <resultMap id="authInfoResultMap" type="AuthInfo" >
    <id column="auth_id" property="authId" jdbcType="INTEGER" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="auth_name" property="authName" jdbcType="VARCHAR" />
    <result column="auth_desc" property="authDesc" jdbcType="VARCHAR" />
    <result column="auth_grade" property="authGrade" jdbcType="INTEGER" />
    <result column="auth_type" property="authType" jdbcType="CHAR" />
    <result column="auth_url" property="authUrl" jdbcType="VARCHAR" />
    <result column="auth_code" property="authCode" jdbcType="VARCHAR" />
    <result column="auth_order" property="authOrder" jdbcType="INTEGER" />
    <result column="auth_state" property="authState" jdbcType="CHAR" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  	<!-- sql片段 模糊查询role -->
  	<sql id="query_role_where">
  		<!-- roleCode不为空则拼接 -->
  		<if test="roleCode != null and roleCode != ''">
			and role_code like concat("%",#{roleCode},"%")
		</if>
		<!-- roleState不为空则拼接 -->
		<if test="roleState != null and roleState != ''">
			and role_state=#{roleState}
		</if>
  	</sql>
	<!-- 全查role表 -->
	<select id="queryAllRole" parameterType="PageUtil" resultMap="RoleResultMap">
  		select * from role 
  			<where>
  				<include refid="query_role_where"></include>
  			</where>
  			limit #{limitIndex},#{pageSize}
 	</select>
 	<!-- 查role表总条数 -->
	<select id="queryRoleAllCount" parameterType="PageUtil" resultType="Integer">
  		select count(*) from role 
  		<where>
			<include refid="query_role_where"></include>
		</where>
 	</select>
 	<!-- 根据role_code查role -->
 	<select id="queryRoleByRoleCode" parameterType="String" resultMap="RoleResultMap">
 		select * from role where role_code=#{roleCode}
 	</select>
 	<!-- 添加role -->
 	<insert id="addRole" parameterType="Role">
 		insert into role(role_name,role_desc,role_code,create_by) 
 			values(#{roleName},#{roleDesc},#{roleCode},#{createBy})
 	</insert>
 	<!-- 修改role -->
 	<update id="updateRole" parameterType="Role">
 		update role set role_name=#{roleName},role_desc=#{roleDesc},role_code=#{roleCode},udate_by=#{udateBy}
 			where role_id=#{roleId}
 	</update>
 	<!-- 启用/禁用 role_satte -->
 	<update id="stopstartRoleState" parameterType="Role">
 		update role set role_state=#{roleState},udate_by=#{udateBy}
 			where role_id=#{roleId}
 	</update>
 	<!-- 根据role_id查询角色已有的auth_id -->
 	<select id="queryAuthIdByRoleId" parameterType="RoleAuth" resultType="String">
 		select group_concat(auth_id) from role_auth where role_id=#{roleId}
 	</select>
 	<!-- 查询auth_info并且auth_state=1 -->
 	<select id="queryAuthInfoByAuthState" resultMap="authInfoResultMap">
		select * from auth_info where auth_state='1'
	</select>
	<!-- 根据role_id删除role_auth -->
	<delete id="deleteRoleAuthByRoleId" parameterType="RoleAuth">
		delete from role_auth where role_id=#{roleId}
	</delete>
	<!-- 根据role_id添加role_auth -->
	<insert id="insertRoleAuth" parameterType="RoleAuth">
		insert into role_auth(role_id,auth_id) values(#{roleId},#{authId})
	</insert>
	<!-- 根据role_id删除role -->
	<delete id="deleteRole" parameterType="Role">
		delete from role where role_id=#{roleId}
	</delete>
</mapper>